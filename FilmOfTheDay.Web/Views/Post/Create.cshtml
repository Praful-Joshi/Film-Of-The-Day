@model FilmOfTheDay.Web.Models.Post.CreatePostViewModel

@{
    ViewData["Title"] = "Create Post";
}

<h2>Create a New Post</h2>

<form asp-action="SearchMovie" method="post" class="mb-3">
    <div class="input-group">
        <input asp-for="SearchQuery" class="form-control" placeholder="Search movie or TV show..." />
        <button type="submit" class="btn btn-primary">Search</button>
    </div>
</form>

@if (Model.SearchResults != null && Model.SearchResults.Any())
{
    <h5>Select a film:</h5>

    <div id="movieGrid" class="row row-cols-2 row-cols-md-6 g-3">
        @foreach (var movie in Model.SearchResults)
        {
            <div class="col movie-card" style="display:none;">
                <div class="card" style="cursor:pointer; max-width:70%;"
                         onclick="selectMovie('@movie.Title', '@movie.PosterUrl', '@movie.MovieUrl', this)">
                    <img src="@movie.PosterUrl" style="max-width:100%" class="card-img-top" />
                    <div class="card-body p-2 text-center">
                        <small>@movie.Title</small>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="text-center mt-3">
        <button id="toggleBtn" type="button" class="btn btn-outline-secondary btn-sm">Show more</button>
    </div>
}

<form asp-action="Create" method="post" class="mt-4">
    <input type="hidden" id="SelectedMovieTitle" name="SelectedMovieTitle" />
    <input type="hidden" id="SelectedMoviePosterUrl" name="SelectedMoviePosterUrl" />
    <input type="hidden" id="SelectedMovieLink" name="SelectedMovieLink" />

    <div class="mb-3">
        <label asp-for="Title" class="form-label">Title</label>
        <input asp-for="Title" class="form-control" />
    </div>

    <div class="mb-3">
        <label asp-for="Description" class="form-label">Description</label>
        <textarea asp-for="Description" class="form-control"></textarea>
    </div>

    <button type="submit" class="btn btn-success">Create Post</button>
</form>

@section Scripts {
    <script>
        let selectedCard = null;

        function selectMovie(title, posterUrl, movieUrl, clickedElement) {
            // Update hidden form fields
            document.getElementById('SelectedMovieTitle').value = title;
            document.getElementById('SelectedMoviePosterUrl').value = posterUrl;
            document.getElementById('SelectedMovieLink').value = movieUrl;

            // Remove highlight from previous selection
            if (selectedCard) {
                selectedCard.querySelector('.card-body').classList.remove('selected-movie');
            }

            // Highlight the newly clicked card's title
            selectedCard = clickedElement.closest('.movie-card');
            selectedCard.querySelector('.card-body').classList.add('selected-movie');
        }

        const movieCards = document.querySelectorAll('.movie-card');
        const toggleBtn = document.getElementById('toggleBtn');
        let expanded = false;

        function getVisibleCount() {
            if (window.innerWidth < 768) return 4; // mobile (2x2)
            else return 12; // desktop (2x6)
        }

        function updateVisibleMovies() {
            const visibleCount = getVisibleCount();
            movieCards.forEach((card, index) => {
                card.style.display = expanded || index < visibleCount ? 'block' : 'none';
            });
            toggleBtn.textContent = expanded ? 'Show less' : 'Show more';
        }

        updateVisibleMovies();
        window.addEventListener('resize', () => { if (!expanded) updateVisibleMovies(); });
        toggleBtn?.addEventListener('click', () => { expanded = !expanded; updateVisibleMovies(); });
    </script>

    <style>
        .movie-card .card-body {
            transition: background-color 0.3s, transform 0.2s;
        }

        .movie-card .card-body.selected-movie {
            background-color: #d4edda; /* light green */
            border-radius: 4px;
            transform: scale(1.03);
        }
    </style>
}


